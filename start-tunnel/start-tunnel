#!/usr/bin/env python3

import botocore
import boto3
import json
import subprocess
import sys

localproxy_path = <LOCALPROXY_PATH>

def usage():
  print("Usage: {} <region> <thing-name> <local-port>".format(sys.argv[0]))

def verify_thing(session: boto3.session.Session, thing: str):
  iot = session.client('iot')
  try:
    resp = iot.describe_thing(thingName=thing)
  except botocore.exceptions.ClientError as e:
    if e.response["Error"]["Code"] == "ResourceNotFoundException":
      print("Invalid thing: {}".format(thing))

      print("Here are the available things:")
      pr = iot.get_paginator("list_things")
      for page in pr.paginate():
        for t in page["things"]:
          print("  {}".format(t["thingName"]))

def start_tunnel(session: boto3.session.Session, thing: str, port: int):
  iot_st = session.client('iotsecuretunneling')
  resp = iot_st.open_tunnel(destinationConfig={"thingName": thing, "services": ["SSH"]})
  print("Started tunnel: {}".format(resp["tunnelId"]))
  try:
    subprocess.call(args=[localproxy_path, "-r", session.region_name, "-s", port], env= { "AWSIOT_TUNNEL_ACCESS_TOKEN": resp["sourceAccessToken"]})
    pass
  except KeyboardInterrupt:
    pass
  finally:
    print("Closing tunnel..", end="", flush=True)
    iot_st.close_tunnel(tunnelId = resp["tunnelId"])
    print("done")

def main():
  try:
    region, thing, port = sys.argv[1:]
  except:
    usage()
    sys.exit(1)

  s = boto3.session.Session(region_name=region)
  verify_thing(s, thing)
  start_tunnel(s, thing, port)

if __name__ == '__main__':
  main()

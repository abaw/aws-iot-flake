#!/usr/bin/env python3

import botocore
import boto3
import json
import subprocess
import sys
import time

localproxy_path = <LOCALPROXY_PATH>

def usage():
  print("Usage: {} <region> <thing-name> <local-port>".format(sys.argv[0]))

def verify_thing(session: boto3.session.Session, thing: str):
  iot = session.client('iot')
  try:
    resp = iot.describe_thing(thingName=thing)
  except botocore.exceptions.ClientError as e:
    if e.response["Error"]["Code"] == "ResourceNotFoundException":
      print("Invalid thing: {}".format(thing))

      print("Here are the available things:")
      pr = iot.get_paginator("list_things")
      for page in pr.paginate():
        for t in page["things"]:
          print("  {}".format(t["thingName"]))

def start_tunnel(session: boto3.session.Session, thing: str, port: int):
  iot_st = session.client('iotsecuretunneling')
  resp = iot_st.open_tunnel(destinationConfig={"thingName": thing, "services": ["SSH"]})
  tunnel_id = resp["tunnelId"]
  src_token = resp["sourceAccessToken"]
  print("Started tunnel: {}".format(tunnel_id))
  try:
    print("Waiting for destination to connect...", end="", flush=True)
    dest_connected = False
    now = time.time()
    expired = now + 30 # FIXME: pass timeout through the command line
    while now < expired:
      resp = iot_st.describe_tunnel(tunnelId=tunnel_id)
      if resp["tunnel"]["destinationConnectionState"]["status"] == "CONNECTED":
        dest_connected = True
        break
      now = time.time()

    if dest_connected:
      print("O.K.")
      subprocess.call(args=[localproxy_path, "-r", session.region_name, "-s", port], env= { "AWSIOT_TUNNEL_ACCESS_TOKEN": src_token})
    else:
      print("Timeout!")
  except KeyboardInterrupt:
    pass
  finally:
    print("Closing tunnel..", end="", flush=True)
    iot_st.close_tunnel(tunnelId=tunnel_id)
    print("done")

def main():
  try:
    if sys.argv[1] in ("-h", "--help"):
      usage()
      return

    region, thing, port = sys.argv[1:]
  except:
    usage()
    sys.exit(1)

  s = boto3.session.Session(region_name=region)
  verify_thing(s, thing)
  start_tunnel(s, thing, port)

if __name__ == '__main__':
  main()
